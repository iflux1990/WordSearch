/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package GUI;

import BLL.WSManager;
import java.awt.event.KeyAdapter;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.io.FileNotFoundException;
import java.util.ArrayList;
import javax.swing.JOptionPane;
import javax.swing.UIManager;

/**
 *
 * @author Daniel
 */
public class GUI extends javax.swing.JFrame
{

    //Global variables
    private WSManager wsmgr;
    private ArrayList<String> resultList = new ArrayList();

    /**
     * Creates new form GUI
     */
    public GUI()
    {
        initComponents();
        addKeyListeners();
        rbtnBeginswith.setSelected(true);
        setLocationRelativeTo(null);

        try
        {
            wsmgr = new WSManager();
        }
        catch (FileNotFoundException ex)
        {
            JOptionPane.showMessageDialog(this, "The dictionary file was not found", "Error - File not Found", JOptionPane.ERROR_MESSAGE);          //displays a error dialog if the target file cannot be found.
        }
        btnSearch.doClick();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents()
    {

        btngSearchType = new javax.swing.ButtonGroup();
        lblQuery = new javax.swing.JLabel();
        lblResult = new javax.swing.JLabel();
        txtQuery = new javax.swing.JTextField();
        btnSearch = new javax.swing.JButton();
        btnClear = new javax.swing.JButton();
        PanelSearchType = new javax.swing.JPanel();
        rbtnBeginswith = new javax.swing.JRadioButton();
        rbtnContains = new javax.swing.JRadioButton();
        rbtnEndswith = new javax.swing.JRadioButton();
        rbtnExact = new javax.swing.JRadioButton();
        PanelStyle = new javax.swing.JPanel();
        chkCasesensitive = new javax.swing.JCheckBox();
        PanelLimitation = new javax.swing.JPanel();
        cmbLimits = new javax.swing.JComboBox();
        lblCount = new javax.swing.JLabel();
        btnClose = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        txtResult = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Word Search");
        setAlwaysOnTop(true);
        setResizable(false);

        lblQuery.setText("Query :");

        lblResult.setText("Result :");

        txtQuery.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                txtQueryActionPerformed(evt);
            }
        });

        btnSearch.setMnemonic('s');
        btnSearch.setText("Search");
        btnSearch.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                btnSearchActionPerformed(evt);
            }
        });

        btnClear.setMnemonic('c');
        btnClear.setText("Clear");
        btnClear.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                btnClearActionPerformed(evt);
            }
        });

        PanelSearchType.setBorder(javax.swing.BorderFactory.createTitledBorder("Search Type"));

        btngSearchType.add(rbtnBeginswith);
        rbtnBeginswith.setMnemonic('b');
        rbtnBeginswith.setText("Begins with");

        btngSearchType.add(rbtnContains);
        rbtnContains.setMnemonic('o');
        rbtnContains.setText("Contains");

        btngSearchType.add(rbtnEndswith);
        rbtnEndswith.setMnemonic('e');
        rbtnEndswith.setText("Ends with");

        btngSearchType.add(rbtnExact);
        rbtnExact.setMnemonic('x');
        rbtnExact.setText("Exact");

        javax.swing.GroupLayout PanelSearchTypeLayout = new javax.swing.GroupLayout(PanelSearchType);
        PanelSearchType.setLayout(PanelSearchTypeLayout);
        PanelSearchTypeLayout.setHorizontalGroup(
            PanelSearchTypeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(PanelSearchTypeLayout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addGroup(PanelSearchTypeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(rbtnExact)
                    .addComponent(rbtnEndswith)
                    .addComponent(rbtnBeginswith)
                    .addComponent(rbtnContains))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        PanelSearchTypeLayout.setVerticalGroup(
            PanelSearchTypeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(PanelSearchTypeLayout.createSequentialGroup()
                .addGap(27, 27, 27)
                .addComponent(rbtnBeginswith)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(rbtnContains)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(rbtnEndswith)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(rbtnExact)
                .addContainerGap(18, Short.MAX_VALUE))
        );

        PanelStyle.setBorder(javax.swing.BorderFactory.createTitledBorder("Style"));

        chkCasesensitive.setMnemonic('a');
        chkCasesensitive.setText("Case sensitive");

        javax.swing.GroupLayout PanelStyleLayout = new javax.swing.GroupLayout(PanelStyle);
        PanelStyle.setLayout(PanelStyleLayout);
        PanelStyleLayout.setHorizontalGroup(
            PanelStyleLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(PanelStyleLayout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addComponent(chkCasesensitive)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        PanelStyleLayout.setVerticalGroup(
            PanelStyleLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(PanelStyleLayout.createSequentialGroup()
                .addComponent(chkCasesensitive)
                .addGap(0, 7, Short.MAX_VALUE))
        );

        PanelLimitation.setBorder(javax.swing.BorderFactory.createTitledBorder("Limitation"));

        cmbLimits.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "None", "10", "20", "50", "100" }));
        cmbLimits.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                cmbLimitsActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout PanelLimitationLayout = new javax.swing.GroupLayout(PanelLimitation);
        PanelLimitation.setLayout(PanelLimitationLayout);
        PanelLimitationLayout.setHorizontalGroup(
            PanelLimitationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(PanelLimitationLayout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addComponent(cmbLimits, javax.swing.GroupLayout.PREFERRED_SIZE, 59, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(49, Short.MAX_VALUE))
        );
        PanelLimitationLayout.setVerticalGroup(
            PanelLimitationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(PanelLimitationLayout.createSequentialGroup()
                .addComponent(cmbLimits, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 8, Short.MAX_VALUE))
        );

        lblCount.setText("Count: ");

        btnClose.setMnemonic('l');
        btnClose.setText("Close");
        btnClose.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                btnCloseActionPerformed(evt);
            }
        });

        txtResult.setEditable(false);
        txtResult.setColumns(20);
        txtResult.setRows(5);
        jScrollPane1.setViewportView(txtResult);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(btnClose)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(lblResult)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(24, 24, 24)
                                        .addComponent(lblCount, javax.swing.GroupLayout.PREFERRED_SIZE, 104, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(10, 10, 10)
                                        .addComponent(jScrollPane1))))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(lblQuery)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(txtQuery, javax.swing.GroupLayout.PREFERRED_SIZE, 253, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(btnSearch)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnClear))
                            .addComponent(PanelStyle, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(PanelSearchType, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(PanelLimitation, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnSearch)
                    .addComponent(btnClear)
                    .addComponent(txtQuery, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblQuery))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblResult)
                            .addComponent(PanelSearchType, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(PanelStyle, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 239, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lblCount)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(PanelLimitation, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(btnClose)
                .addContainerGap(31, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void cmbLimitsActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_cmbLimitsActionPerformed
    {//GEN-HEADEREND:event_cmbLimitsActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cmbLimitsActionPerformed

    private void txtQueryActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_txtQueryActionPerformed
    {//GEN-HEADEREND:event_txtQueryActionPerformed
    }//GEN-LAST:event_txtQueryActionPerformed

    private void btnSearchActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_btnSearchActionPerformed
    {//GEN-HEADEREND:event_btnSearchActionPerformed
        txtResult.setText("");

        if (!chkCasesensitive.isSelected())
        {
            search(txtQuery.getText().toLowerCase());
        }
        else
        {
            search(txtQuery.getText());
        }
        updateResult();
        txtResult.setCaretPosition(0);
    }//GEN-LAST:event_btnSearchActionPerformed

    
    /*
     * Clears the textArea, query input box and the Count
     */
    private void btnClearActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_btnClearActionPerformed
    {//GEN-HEADEREND:event_btnClearActionPerformed
        txtResult.setText("");
        txtQuery.setText("");
        lblCount.setText("Count: 0");
    }//GEN-LAST:event_btnClearActionPerformed

    
    /*
     * Closes the current frame, if its only one open it shuts down the 
     * application
     */
    private void btnCloseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCloseActionPerformed
        this.dispose();
    }//GEN-LAST:event_btnCloseActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[])
    {
        /* Set the system look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try
        {
            javax.swing.UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
        }
        catch (ClassNotFoundException ex)
        {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        catch (InstantiationException ex)
        {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        catch (IllegalAccessException ex)
        {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        catch (javax.swing.UnsupportedLookAndFeelException ex)
        {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable()
        {
            public void run()
            {
                new GUI().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel PanelLimitation;
    private javax.swing.JPanel PanelSearchType;
    private javax.swing.JPanel PanelStyle;
    private javax.swing.JButton btnClear;
    private javax.swing.JButton btnClose;
    private javax.swing.JButton btnSearch;
    private javax.swing.ButtonGroup btngSearchType;
    private javax.swing.JCheckBox chkCasesensitive;
    private javax.swing.JComboBox cmbLimits;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblCount;
    private javax.swing.JLabel lblQuery;
    private javax.swing.JLabel lblResult;
    private javax.swing.JRadioButton rbtnBeginswith;
    private javax.swing.JRadioButton rbtnContains;
    private javax.swing.JRadioButton rbtnEndswith;
    private javax.swing.JRadioButton rbtnExact;
    private javax.swing.JTextField txtQuery;
    private javax.swing.JTextArea txtResult;
    // End of variables declaration//GEN-END:variables

    /*
     * Checks which of the radiobuttons are checked are calls the appropriate 
     * method with the SearchWord as parameter.
     */
    private void search(String query)
    {
        if (rbtnBeginswith.isSelected())
        {
            resultList = wsmgr.searchBegins(query);
        }
        else if (rbtnContains.isSelected())
        {
            resultList = wsmgr.searchContains(query);
        }
        else if (rbtnEndswith.isSelected())
        {
            resultList = wsmgr.searchEnds(query);
        }
        else if (rbtnExact.isSelected())
        {
            resultList = wsmgr.searchExact(query);
        }
    }

    
    /*
     * Updates the JtextArea and lblCount with searchresults from the result
     * Arraylist. 
     */
    private void updateResult()
    {
        if (cmbLimits.getSelectedIndex() == 0)
        {
            for (int i = 0; i < resultList.size(); i++)
            {
                txtResult.append(resultList.get(i) + "\n");
            }
            lblCount.setText("Count: " + resultList.size());
        }
        else if (cmbLimits.getSelectedIndex() == 1)
        {
            for (int i = 0; i < Math.min(10, resultList.size()); i++)
            {
                txtResult.append(resultList.get(i) + "\n");
            }
            lblCount.setText("Count:  " + Math.min(10, resultList.size()) + " of " + resultList.size());
        }
        else if (cmbLimits.getSelectedIndex() == 2)
        {
            for (int i = 0; i < Math.min(20, resultList.size()); i++)
            {
                txtResult.append(resultList.get(i) + "\n");
            }
            lblCount.setText("Count:  " + Math.min(20, resultList.size()) + " of " + resultList.size());
        }
        else if (cmbLimits.getSelectedIndex() == 3)
        {
            for (int i = 0; i < Math.min(50, resultList.size()); i++)
            {
                txtResult.append(resultList.get(i) + "\n");
            }
            lblCount.setText("Count:  " + Math.min(50, resultList.size()) + " of " + resultList.size());
        }
        else if (cmbLimits.getSelectedIndex() == 4)
        {
            for (int i = 0; i < Math.min(100, resultList.size()); i++)
            {
                txtResult.append(resultList.get(i) + "\n");
            }
            lblCount.setText("Count:  " + Math.min(100, resultList.size()) + " of " + resultList.size());
        }
    }

    
    /*
     * Listens to the "Esc" key and "ENTER" key
     * Enter acts as a click on the "search" button.
     * Esc acts as a click on the "close" button. 
     */
    private void addKeyListeners()
    {
        KeyListener kl = new KeyAdapter()
        {
            @Override
            public void keyPressed(KeyEvent ke)
            {
                if (ke.getKeyCode() == KeyEvent.VK_ESCAPE)
                {
                    btnClose.doClick();
                }
                if (ke.getKeyCode() == KeyEvent.VK_ENTER)
                {
                    btnSearch.doClick();
                }
            }
        };
        txtQuery.addKeyListener(kl);
        txtQuery.addKeyListener(kl);
        txtResult.addKeyListener(kl);
        rbtnBeginswith.addKeyListener(kl);
        rbtnContains.addKeyListener(kl);
        rbtnEndswith.addKeyListener(kl);
        rbtnExact.addKeyListener(kl);
        cmbLimits.addKeyListener(kl);
        chkCasesensitive.addKeyListener(kl);
        btnSearch.addKeyListener(kl);
        btnClear.addKeyListener(kl);
    }
}
